/**
 * Handles api requests
 * @type {Class}
 */
export default class Requests {
  /**
   * Static init to make options/data available to all instances
   * @param  {Object} options Fieldsets options
   * @param  {Object} data    Fieldsets data
   */
  static init(options, data) {
    Requests.options = options;
    Requests.data = data;
  }

  constructor(url) {
    const { options, data } = Requests;
    this.url = url || null;
    this._options = options;
    this._data = data;

    this.requestsCounter = 0;
    this.requestsReceived = 0;
  }

  /**
   * Initiate superagent GET request with supplied url and query
   * @param  {String} url        URL to use
   * @param  {Object} [query={}] list of queries
   * @return {Promise}           Promise containing response
   */
  get({ url = this.url, query = {} }) {
    return this.request('GET', url, query).then(({ body }) => {
      let response = [];

      if (this.requestsCounter > this.requestsReceived) {
        this.requestsReceived = this.requestsCounter;

        if (body && body.results) {
          response = body.results;
        } else if (body) {
          response = body;
        }

        return response;
      }
      return 'Do not update';
    });
  }

  /**
   * Returns the query string generated by a superagent request
   * @param  {Object} query list of queries
   * @return {String}       query string
   */
  createQueryString(query) {
    const request = this._options.superagent('GET', '').query(query);

    return request._query[0];
  }

  /**
   * Superagent request
   * @param  {string} method     type of request (e.g. GET, POST, etc)
   * @param  {String} url        URL to use
   * @param  {Object} [query={}] list of queries
   * @return {Promise}           Promise containing response
   */
  request(method, url = this.url, query = {}) {
    this.requestsCounter++;
    return this._options
      .superagent(method, url)
      .query(query)
      .set(this._data.headers);
  }
}

Requests.options = null;
Requests.data = null;
